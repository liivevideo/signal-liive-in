// Generated by CoffeeScript 1.10.0
(function() {
  var Handshake, io;

  io = require('socket.io');

  Handshake = (function() {
    var connect, exchange, leave, reactions, rtcChannel, socket;

    socket = io();

    reactions = null;

    rtcChannel = null;

    function Handshake(_rtcChannel, _reactions) {
      reactions = _reactions;
      rtcChannel = _rtcChannel;
      socket.on('connect', connect);
      socket.on('exchange', exchange);
      socket.on('leave', leave);
    }

    Handshake.prototype.join = function(id, callback) {
      return socket.emit('join', id, (function(_this) {
        return function(socketIds) {
          console.log('join', socketIds);
          return callback(socketIds);
        };
      })(this));
    };

    Handshake.prototype.candidate = function(id, candidate) {
      return socket.emit('exchange', {
        'to': id,
        'candidate': candidate
      });
    };

    Handshake.prototype.description = function(id, description) {
      return socket.emit('exchange', {
        'to': id,
        'sdp': description
      });
    };

    connect = function(data) {
      return rtcChannel.getMedia({
        "audio": true,
        "video": true
      }, function(stream) {
        if (reactions.didConnect != null) {
          return reactions.didConnect(stream);
        }
      });
    };

    exchange = function(data) {
      return rtcChannel.exchange(data, function(error, result) {
        if (error != null) {
          console.log(error);
        }
        if ((result != null) && (reactions.didExchange != null)) {
          return reactions.didExchange(result.id, result.description);
        }
      });
    };

    leave = function(id) {
      return rtcChannel.deleteListener(id, function(id) {
        if (reactions.didLeave != null) {
          return reactions.didLeave(id);
        }
      });
    };

    return Handshake;

  })();

  module.exports = Handshake;

}).call(this);

//# sourceMappingURL=Handshake.js.map
