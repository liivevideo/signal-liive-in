// Generated by CoffeeScript 1.10.0
(function() {
  var RTCChannel,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  RTCChannel = (function() {
    var configuration, getUserMedia, localStream, observers, pc, pcPeers, reactions;

    pc = null;

    pcPeers = [];

    localStream = null;

    getUserMedia = navigator.getUserMedia || navigator.mozGetUserMedia || navigator.webkitGetUserMedia || navigator.msGetUserMedia;

    configuration = null;

    observers = null;

    reactions = null;

    function RTCChannel(_configuration, _observers, _reactions) {
      configuration = _configuration;
      observers = _observers;
      reactions = _reactions;
    }

    RTCChannel.prototype.getMedia = function(types, callback) {
      return getUserMedia(types, function(stream) {
        localStream = stream;
        return callback(stream);
      }, function(error) {
        return console.log(error);
      });
    };

    RTCChannel.prototype.createTextChannel = function(socketId) {
      var dataChannel;
      if ((pc.textDataChannel != null)) {
        return;
      }
      dataChannel = pc.createDataChannel("text");
      return pc.textDataChannel = observers.addedTextChannel(socketId, dataChannel);
    };

    RTCChannel.prototype.createListener = function(socketId, isOffer) {
      pc = new RTCPeerConnection(configuration);
      pcPeers[socketId] = pc;
      pc.onicecandidate = function(event) {
        console.log('onicecandidate', event);
        if (event.candidate) {
          return reactions.exchangeCandidate(socketId, event.candidate);
        }
      };
      pc.onnegotiationneeded = function() {
        console.log('onnegotiationneeded');
        if (isOffer) {
          return pc.createOffer(function(desc) {
            console.log('createOffer', desc);
            return pc.setLocalDescription(desc, function() {
              console.log('setLocalDescription', pc.localDescription);
              return reactions.exchangeDescription(socketId, pc.localDescription);
            }, function(error) {
              return console.log(error);
            });
          }, function(error) {
            return console.log(error);
          });
        }
      };
      pc.oniceconnectionstatechange = function(event) {
        console.log('oniceconnectionstatechange', event);
        if (event.target.iceConnectionState === 'connected') {
          return this.createTextChannel(socketId);
        }
      };
      pc.onsignalingstatechange = function(event) {
        return console.log('onsignalingstatechange', event);
      };
      pc.onaddstream = function(event) {
        return observers.addedVideoChannel(socketId, event.stream);
      };
      pc.addStream(localStream);
      return pc;
    };

    RTCChannel.prototype.deleteListener = function(socketId, callback) {
      pc = pcPeers[socketId];
      if (pc) {
        pc.close();
        delete pcPeers[socketId];
      }
      observers.removedVideoChannel(socketId);
      return callback(socketId);
    };

    RTCChannel.prototype.send = function(text) {
      var i, len, results;
      results = [];
      for (i = 0, len = pcPeers.length; i < len; i++) {
        pc = pcPeers[i];
        results.push(pc.textDataChannel.send(text));
      }
      return results;
    };

    RTCChannel.prototype.exchange = function(data, callback) {
      var fromId;
      fromId = data.from;
      if ((indexOf.call(pcPeers, fromId) >= 0)) {
        pc = pcPeers[fromId];
      } else {
        pc = createListener(fromId, false);
      }
      if (data.sdp) {
        console.log('exchange sdp', data);
        return pc.setRemoteDescription(new RTCSessionDescription(data.sdp), function() {
          if (pc.remoteDescription.type === "offer") {
            return pc.createAnswer(function(desc) {
              console.log('createAnswer', desc);
              return pc.setLocalDescription(desc, function() {
                console.log('setLocalDescription', pc.localDescription);
                return callback(null, {
                  id: fromId,
                  description: pc.localDescription
                });
              }, function(error) {
                return callback(error, null);
              });
            }, function(error) {
              return callback(error, null);
            });
          }
        }, function(error) {
          return callback(error, null);
        });
      } else {
        console.log('exchange candidate', data);
        pc.addIceCandidate(new RTCIceCandidate(data.candidate));
        return callback(null, null);
      }
    };

    return RTCChannel;

  })();

  module.exports = RTCChannel;

}).call(this);

//# sourceMappingURL=RTCChannel.js.map
