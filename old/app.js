// Generated by CoffeeScript 1.10.0
(function() {
  var app, express, fs, io, open, options, roomList, server, serverAddress, serverPort, serverScheme, serverUrl, socketIdsInRoom;

  express = require('express');

  app = express();

  fs = require('fs');

  open = require('open');

  options = {
    key: fs.readFileSync('./fake-keys/privatekey.pem'),
    cert: fs.readFileSync('./fake-keys/certificate.pem')
  };

  serverAddress = process.env.ADDRESS || '50.67.201.214';

  serverScheme = process.env.SCHEME || 'https';

  serverPort = process.env.PORT || (serverScheme === 'https' ? 4443 : 8000);

  serverUrl = serverScheme + '://' + serverAddress + ':' + serverPort;

  console.log("server is at: " + serverUrl);

  if (serverScheme === 'https') {
    server = require(serverScheme).createServer(options, app);
  } else {
    server = require(serverScheme).createServer(app);
  }

  io = require('socket.io')(server);

  roomList = {};

  app.get('/', function(req, res) {
    console.log('get /');
    return res.sendFile(__dirname + '/index.html');
  });

  server.listen(serverPort, function() {
    console.log('server up and running at %s port', serverPort);
    if (process.env.LOCAL) {
      return open(serverUrl);
    }
  });

  socketIdsInRoom = (function(_this) {
    return function(name) {
      var collection, key, socketIds, value;
      socketIds = io.nsps['/'].adapter.rooms[name];
      if ((socketIds != null)) {
        collection = [];
        for (key in socketIds) {
          value = socketIds[key];
          collection.push(key);
        }
        return collection;
      } else {
        return [];
      }
    };
  })(this);

  io.on('connection', function(socket) {
    console.log('connection');
    socket.on('disconnect', function() {
      var room;
      console.log('disconnect');
      if ((socket.room != null)) {
        room = socket.room;
        io.to(room).emit('leave', socket.id);
        socket.leave(room);
      }
    });
    socket.on('join', function(name, callback) {
      var socketIds;
      console.log('join', name);
      socketIds = socketIdsInRoom(name);
      callback(socketIds);
      socket.join(name);
      socket.room = name;
    });
    return socket.on('exchange', function(data) {
      var to;
      console.log('exchange', data);
      data.from = socket.id;
      to = io.sockets.connected[data.to];
      to.emit('exchange', data);
    });
  });

}).call(this);

//# sourceMappingURL=app.js.map
