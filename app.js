// Generated by CoffeeScript 1.10.0
(function() {
  var app, express, fs, http, https, io, open, options, path, serverHttp, serverHttps, serverPortHttp, serverPortHttps, socketIdsInRoom;

  express = require('express');

  app = express();

  fs = require('fs');

  open = require('open');

  path = require('path');

  serverPortHttp = process.env.PORT || 80;

  http = require('http');

  serverHttp = http.createServer(app);

  options = {
    key: fs.readFileSync('/etc/letsencrypt/live/liive.io/privkey.pem'),
    cert: fs.readFileSync('/etc/letsencrypt/live/liive.io/fullchain.pem'),
    ca: fs.readFileSync('/etc/letsencrypt/live/liive.io/chain.pem'),
    requestCert: false,
    rejectUnauthorized: false
  };

  serverPortHttps = process.env.PORT || 443;

  https = require('https');

  serverHttps = https.createServer(options, app);

  io = require('socket.io').listen(serverHttps);

  socketIdsInRoom = function(name) {
    var collection, i, key, len, socketIds;
    console.log("ids in room...");
    socketIds = io.nsps['/'].adapter.rooms[name];
    if (socketIds) {
      collection = [];
      for (i = 0, len = socketIds.length; i < len; i++) {
        key = socketIds[i];
        collection.push(key);
      }
      return collection;
    } else {
      return [];
    }
  };

  io.on('connection', function(socket) {
    console.log('connection');
    socket.on('disconnect', function() {
      var room;
      console.log('disconnect');
      if (socket.room) {
        room = socket.room;
        io.to(room).emit('leave', socket.id);
        return socket.leave(room);
      }
    });
    socket.on('join', function(name, callback) {
      var socketIds;
      console.log('join', name);
      socketIds = socketIdsInRoom(name);
      callback(socketIds);
      socket.join(name);
      return socket.room = name;
    });
    return socket.on('exchange', function(data) {
      var to;
      console.log('exchange', data);
      data.from = socket.id;
      to = io.sockets.connected[data.to];
      return to.emit('exchange', data);
    });
  });

  app.use('/.well-known', express["static"](path.join(__dirname, '.well-known')));

  app.use('/', express["static"](path.join(__dirname, 'public')));

  serverHttps.listen(serverPortHttps, function() {
    console.log('server up and running at %s port', serverPortHttps);
    if (process.env.LOCAL) {
      return open('https://liive.io');
    }
  });

  serverHttp.listen(serverPortHttp, function() {
    return console.log('server up and running at %s port', serverPortHttp);
  });

}).call(this);

//# sourceMappingURL=app.js.map
