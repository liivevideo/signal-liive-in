// Generated by CoffeeScript 1.10.0
(function() {
  var SignalClient;

  SignalClient = (function() {
    var createDataChannel, createOffer, isOffer, pc, pcPeers, socket;

    pc = null;

    socket = null;

    pcPeers = [];

    isOffer = false;

    function SignalClient(configuration, _socket, _socketId, _isOffer) {
      socket = _socket;
      isOffer = _isOffer;
      pc = new RTCPeerConnection(configuration);
      pcPeers[_socketId] = pc;
      this.register(_socketId);
    }

    createOffer = function(socketId) {
      return pc.createOffer(function(desc) {
        console.log('createOffer', desc);
        return pc.setLocalDescription(desc, function() {
          console.log('setLocalDescription', pc.localDescription);
          return socket.emit('exchange', {
            'to': socketId,
            'sdp': pc.localDescription
          });
        }, logError);
      }, logError);
    };

    createDataChannel = function() {
      var dataChannel;
      if (pc.textDataChannel) {
        return;
      }
      dataChannel = pc.createDataChannel("text");
      dataChannel.onerror = function(error) {
        return console.log("dataChannel.onerror", error);
      };
      dataChannel.onmessage = function(event) {
        console.log("dataChannel.onmessage:", event.data);
        return showSocketData(socketId, event);
      };
      dataChannel.onopen = function() {
        console.log('dataChannel.onopen');
        return showTextRoom();
      };
      dataChannel.onclose = function() {
        return console.log("dataChannel.onclose");
      };
      return pc.textDataChannel = dataChannel;
    };

    SignalClient.prototype.register = function(socketId) {
      pc.onicecandidate = function(event) {
        console.log('onicecandidate', event);
        if (event.candidate) {
          return socket.emit('exchange', {
            'to': socketId,
            'candidate': event.candidate
          });
        }
      };
      pc.onnegotiationneeded = function() {
        console.log('onnegotiationneeded');
        if (isOffer) {
          return createOffer(socketId);
        }
      };
      pc.oniceconnectionstatechange = function(event) {
        console.log('oniceconnectionstatechange', event);
        if (event.target.iceConnectionState === 'connected') {
          return createDataChannel();
        }
      };
      pc.onsignalingstatechange = function(event) {
        return console.log('onsignalingstatechange', event);
      };
      pc.onaddstream = function(event) {
        return addStream(event, socketId);
      };
      pc.addStream(localStream);
      return pc;
    };

    return SignalClient;

  })();

}).call(this);

//# sourceMappingURL=SignalClient.js.map
