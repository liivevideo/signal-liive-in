// Generated by CoffeeScript 1.10.0
(function() {
  var Signaling,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Signaling = (function() {
    function Signaling(io) {
      this.io = io != null ? io : null;
      this.socketIdsInRoom = bind(this.socketIdsInRoom, this);
      this.exchange = bind(this.exchange, this);
      this.join = bind(this.join, this);
      this.disconnect = bind(this.disconnect, this);
      this.connect = bind(this.connect, this);
      this.register = bind(this.register, this);
    }

    Signaling.prototype.register = function(io) {
      this.io = io;
      return this.io.on('connection', this.connect);
    };

    Signaling.prototype.connect = function(socket) {
      console.log('connection');
      this.socket = socket;
      this.socket.on('disconnect', this.disconnect);
      this.socket.on('join', this.join);
      return this.socket.on('exchange', this.exchange);
    };

    Signaling.prototype.disconnect = function() {
      var room;
      console.log('disconnect');
      if ((this.socket.room != null)) {
        room = this.socket.room;
        this.io.to(room).emit('leave', this.socket.id);
        this.socket.leave(room);
      }
    };

    Signaling.prototype.join = function(name, callback) {
      var socketIds;
      console.log('join', name);
      socketIds = this.socketIdsInRoom(name);
      callback(socketIds);
      this.socket.join(name);
      this.socket.room = name;
    };

    Signaling.prototype.exchange = function(data) {
      var to;
      console.log('exchange', data);
      data.from = this.socket.id;
      to = this.io.sockets.connected[data.to];
      to.emit('exchange', data);
    };

    Signaling.prototype.socketIdsInRoom = function(name) {
      var collection, key, socketIds, value;
      socketIds = this.io.nsps['/'].adapter.rooms[name];
      if ((socketIds != null)) {
        collection = [];
        for (key in socketIds) {
          value = socketIds[key];
          collection.push(key);
        }
        return collection;
      } else {
        return [];
      }
    };

    return Signaling;

  })();

  module.exports = Signaling;

}).call(this);

//# sourceMappingURL=Signaling.js.map
